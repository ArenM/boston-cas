#= require ./namespace

class App.ContactManager.Controller
  constructor: (@element) ->
    # These two pieces of data are used to determine the form_input_prefix
    @base_object_name = $(@element).data 'base-object-name'
    @contacts_type = $(@element).data 'contacts-type'
    @selected_contacts = new App.ContactManager.ContactStore
    @loading_spinner = $(@element).find('[data-loading-spinner]')
    @_init_existing_contacts()
    @_init_available_contacts()
    @_init_searcher()
    @_listen_for_remove_contact_links()
    @hide_loading_spinner()
    
  
  _init_existing_contacts: ->
    # find the fieldsets generated by simple_fields_for and replace them with our
    # contact_row template
    $existing_contact_elements = $(@element).find '[data-existing-contact]'
    $existing_contact_elements.each (i, element) =>
      contact = App.ContactManager.Contact.from_element(element)
      contact_row = new App.ContactManager.ContactRow contact, controller: @, index: i
      $(element).remove()
      @select_contact contact

  _init_available_contacts: ->
    @available_contacts = new App.ContactManager.ContactStore
    $(@element).find('[data-available-contact]')
      .each (_i, element) =>
        @available_contacts.add App.ContactManager.Contact.from_element element
      

  _init_searcher: ->
    @searcher = new App.ContactManager.Searcher $(@element).find('[data-contact-searcher]')[0], controller: @
  
  _listen_for_remove_contact_links: ->
    $(@element).on 'click', '[data-remove-contact-link]', (evt) =>
      evt.preventDefault()
      contact_id_str = $(evt.target).attr('data-remove-contact-link')
      # evt.target might be the inner content of the link
      unless !!contact_id_str
        link = $(evt.target).parents('[data-remove-contact-link]')
        contact_id_str = $(link).attr('data-remove-contact-link')

      contact_id = Number contact_id_str
      contact = @selected_contacts.find contact_id
      @remove_contact contact
  
  select_contact: (contact) ->
    contact_row = new App.ContactManager.ContactRow contact,
      controller: @
    $(@element).find('[data-selected-contacts]').append contact_row.to_html()
    @selected_contacts.add contact
    
  remove_contact: (contact) ->
    @show_loading_spinner =>
      contact_row_element = $(@element).find("[data-contact-row][data-contact-id=\"#{contact.id}\"]")
      $(contact_row_element).remove()
      @available_contacts.add contact
      @searcher.reset()
      @hide_loading_spinner()
    
  hide_loading_spinner: (callback) ->
    $(@loading_spinner).hide callback
    
  show_loading_spinner: (callback) ->
    $(@loading_spinner).show callback

# fix select2 typing in modal
$.fn.modal.Constructor.prototype.enforceFocus = -> {}